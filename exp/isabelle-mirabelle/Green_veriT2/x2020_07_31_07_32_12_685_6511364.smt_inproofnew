(assume a0 (not (member$ f$ (measurable$ lborel$ borel$))))
(assume a3 (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_c_fun$)) (=> (integrable$b ?v0 ?v1) (member$ ?v1 (measurable$ ?v0 borel$)))))
(assume a4 (integrable$b lborel$ f$))
(anchor :step t4 :args ((:= (?v0 A_b_prod_measure$) veriT_vr8) (:= (?v1 A_b_prod_c_fun$) veriT_vr9)))
(step t4.t1 (cl (= ?v0 veriT_vr8)) :rule refl)
(step t4.t2 (cl (= ?v1 veriT_vr9)) :rule refl)
(step t4.t3 (cl (= (integrable$b ?v0 ?v1) (integrable$b veriT_vr8 veriT_vr9))) :rule cong :premises (t4.t1 t4.t2))
(step t4.t4 (cl (= ?v1 veriT_vr9)) :rule refl)
(step t4.t5 (cl (= ?v0 veriT_vr8)) :rule refl)
(step t4.t6 (cl (= (measurable$ ?v0 borel$) (measurable$ veriT_vr8 borel$))) :rule cong :premises (t4.t5))
(step t4.t7 (cl (= (member$ ?v1 (measurable$ ?v0 borel$)) (member$ veriT_vr9 (measurable$ veriT_vr8 borel$)))) :rule cong :premises (t4.t4 t4.t6))
(step t4.t8 (cl (= (=> (integrable$b ?v0 ?v1) (member$ ?v1 (measurable$ ?v0 borel$))) (=> (integrable$b veriT_vr8 veriT_vr9) (member$ veriT_vr9 (measurable$ veriT_vr8 borel$))))) :rule cong :premises (t4.t3 t4.t7))
(step t4 (cl (= (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_c_fun$)) (=> (integrable$b ?v0 ?v1) (member$ ?v1 (measurable$ ?v0 borel$)))) (forall ((veriT_vr8 A_b_prod_measure$) (veriT_vr9 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr8 veriT_vr9) (member$ veriT_vr9 (measurable$ veriT_vr8 borel$)))))) :rule bind)
(step t5 (cl (not (= (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_c_fun$)) (=> (integrable$b ?v0 ?v1) (member$ ?v1 (measurable$ ?v0 borel$)))) (forall ((veriT_vr8 A_b_prod_measure$) (veriT_vr9 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr8 veriT_vr9) (member$ veriT_vr9 (measurable$ veriT_vr8 borel$)))))) (not (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_c_fun$)) (=> (integrable$b ?v0 ?v1) (member$ ?v1 (measurable$ ?v0 borel$))))) (forall ((veriT_vr8 A_b_prod_measure$) (veriT_vr9 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr8 veriT_vr9) (member$ veriT_vr9 (measurable$ veriT_vr8 borel$))))) :rule equiv_pos2)
(step t6 (cl (forall ((veriT_vr8 A_b_prod_measure$) (veriT_vr9 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr8 veriT_vr9) (member$ veriT_vr9 (measurable$ veriT_vr8 borel$))))) :rule th_resolution :premises (a3 t4 t5))
(anchor :step t7 :args ((:= (veriT_vr8 A_b_prod_measure$) veriT_vr10) (:= (veriT_vr9 A_b_prod_c_fun$) veriT_vr11)))
(step t7.t1 (cl (= veriT_vr8 veriT_vr10)) :rule refl)
(step t7.t2 (cl (= veriT_vr9 veriT_vr11)) :rule refl)
(step t7.t3 (cl (= (integrable$b veriT_vr8 veriT_vr9) (integrable$b veriT_vr10 veriT_vr11))) :rule cong :premises (t7.t1 t7.t2))
(step t7.t4 (cl (= veriT_vr9 veriT_vr11)) :rule refl)
(step t7.t5 (cl (= veriT_vr8 veriT_vr10)) :rule refl)
(step t7.t6 (cl (= (measurable$ veriT_vr8 borel$) (measurable$ veriT_vr10 borel$))) :rule cong :premises (t7.t5))
(step t7.t7 (cl (= (member$ veriT_vr9 (measurable$ veriT_vr8 borel$)) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$)))) :rule cong :premises (t7.t4 t7.t6))
(step t7.t8 (cl (= (=> (integrable$b veriT_vr8 veriT_vr9) (member$ veriT_vr9 (measurable$ veriT_vr8 borel$))) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) :rule cong :premises (t7.t3 t7.t7))
(step t7 (cl (= (forall ((veriT_vr8 A_b_prod_measure$) (veriT_vr9 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr8 veriT_vr9) (member$ veriT_vr9 (measurable$ veriT_vr8 borel$)))) (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$)))))) :rule bind)
(step t8 (cl (not (= (forall ((veriT_vr8 A_b_prod_measure$) (veriT_vr9 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr8 veriT_vr9) (member$ veriT_vr9 (measurable$ veriT_vr8 borel$)))) (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$)))))) (not (forall ((veriT_vr8 A_b_prod_measure$) (veriT_vr9 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr8 veriT_vr9) (member$ veriT_vr9 (measurable$ veriT_vr8 borel$))))) (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) :rule equiv_pos2)
(step t9 (cl (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) :rule th_resolution :premises (t6 t7 t8))
(step t10 (cl (or (not (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (or (not (integrable$b veriT_vr10 veriT_vr11)) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$)))))) :rule qnt_cnf)
(step t11 (cl (not (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (or (not (integrable$b veriT_vr10 veriT_vr11)) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) :rule or :premises (t10))
(step t12 (cl (or (not (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (or (not (integrable$b veriT_vr10 veriT_vr11)) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) (or (not (integrable$b lborel$ f$)) (member$ f$ (measurable$ lborel$ borel$))))) :rule forall_inst :args ((:= veriT_vr10 lborel$) (:= veriT_vr11 f$)))
(step t13 (cl (not (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (or (not (integrable$b veriT_vr10 veriT_vr11)) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) (or (not (integrable$b lborel$ f$)) (member$ f$ (measurable$ lborel$ borel$)))) :rule or :premises (t12))
(step t14 (cl (or (not (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) (or (not (integrable$b lborel$ f$)) (member$ f$ (measurable$ lborel$ borel$)))) (not (not (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))))) :rule or_neg)
(step t15 (cl (not (not (not (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))))) (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) :rule not_not)
(step t16 (cl (or (not (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) (or (not (integrable$b lborel$ f$)) (member$ f$ (measurable$ lborel$ borel$)))) (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) :rule th_resolution :premises (t15 t14))
(step t17 (cl (or (not (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) (or (not (integrable$b lborel$ f$)) (member$ f$ (measurable$ lborel$ borel$)))) (not (or (not (integrable$b lborel$ f$)) (member$ f$ (measurable$ lborel$ borel$))))) :rule or_neg)
(step t18 (cl (or (not (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) (or (not (integrable$b lborel$ f$)) (member$ f$ (measurable$ lborel$ borel$))))) :rule th_resolution :premises (t11 t13 t16 t17))
(step t19 (cl (not (or (not (integrable$b lborel$ f$)) (member$ f$ (measurable$ lborel$ borel$)))) (not (integrable$b lborel$ f$)) (member$ f$ (measurable$ lborel$ borel$))) :rule or_pos)
(step t20 (cl (not (forall ((veriT_vr10 A_b_prod_measure$) (veriT_vr11 A_b_prod_c_fun$)) (=> (integrable$b veriT_vr10 veriT_vr11) (member$ veriT_vr11 (measurable$ veriT_vr10 borel$))))) (or (not (integrable$b lborel$ f$)) (member$ f$ (measurable$ lborel$ borel$)))) :rule or :premises (t18))
(step t21 (cl (not (or (not (integrable$b lborel$ f$)) (member$ f$ (measurable$ lborel$ borel$))))) :rule resolution :premises (t19 a0 a4))
(step t22 (cl) :rule resolution :premises (t20 t9 t21))
