; --index-fresh-sorts --proof-version=2 --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-sort A$ 0)
(declare-sort Real_set$ 0)
(declare-sort Real_a_fun$ 0)
(declare-sort Real_filter$ 0)
(declare-fun g$ () Real_a_fun$)
(declare-fun u$ () Real)
(declare-fun v$ () Real)
(declare-fun x$ () Real)
(declare-fun uu$ () Real_a_fun$)
(declare-fun top$ () Real_set$)
(declare-fun plus$ (A$ A$) A$)
(declare-fun zero$ () A$)
(declare-fun times$ (Real Real) Real)
(declare-fun member$ (Real Real_set$) Bool)
(declare-fun scaleR$ (Real A$) A$)
(declare-fun fun_app$ (Real_a_fun$ Real) A$)
(declare-fun scaleR$a (Real Real) Real)
(declare-fun at_within$ (Real Real_set$) Real_filter$)
(declare-fun atLeastAtMost$ (Real Real) Real_set$)
(declare-fun vector_derivative$ (Real_a_fun$ Real_filter$) A$)
(assert (! (forall ((?v0 Real)) (! (= (fun_app$ uu$ ?v0) (fun_app$ g$ (+ (times$ (- v$ u$) ?v0) u$))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= (vector_derivative$ uu$ (at_within$ x$ (atLeastAtMost$ 0.0 1.0))) (scaleR$ (- v$ u$) (vector_derivative$ g$ (at_within$ (+ (times$ (- v$ u$) x$) u$) (atLeastAtMost$ 0.0 1.0)))))) :named a1))
(assert (! (member$ u$ (atLeastAtMost$ 0.0 1.0)) :named a2))
(assert (! (member$ v$ (atLeastAtMost$ 0.0 1.0)) :named a3))
(assert (! (member$ x$ (atLeastAtMost$ 0.0 1.0)) :named a4))
(assert (! (= (vector_derivative$ g$ (at_within$ (+ (times$ (- v$ u$) x$) u$) (atLeastAtMost$ 0.0 1.0))) (vector_derivative$ g$ (at_within$ (+ (times$ (- v$ u$) x$) u$) top$))) :named a5))
(assert (! (= (vector_derivative$ uu$ (at_within$ x$ (atLeastAtMost$ 0.0 1.0))) (scaleR$ (- v$ u$) (vector_derivative$ g$ (at_within$ (+ (times$ (- v$ u$) x$) u$) top$)))) :named a6))
(assert (! (<= u$ v$) :named a7))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (+ (scaleR$a (- 1.0 ?v0) ?v1) (scaleR$a ?v0 ?v1)) ?v1)) :named a8))
(assert (! (forall ((?v0 Real) (?v1 A$)) (= (plus$ (scaleR$ (- 1.0 ?v0) ?v1) (scaleR$ ?v0 ?v1)) ?v1)) :named a9))
(assert (! (<= (+ (times$ (- v$ u$) x$) u$) 1.0) :named a10))
(assert (! (<= 0.0 (+ (times$ (- v$ u$) x$) u$)) :named a11))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (= (+ ?v0 (scaleR$a ?v1 ?v2)) (+ ?v2 (scaleR$a ?v1 ?v0))) (or (= ?v2 ?v0) (= ?v1 1.0)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 Real) (?v2 A$)) (= (= (plus$ ?v0 (scaleR$ ?v1 ?v2)) (plus$ ?v2 (scaleR$ ?v1 ?v0))) (or (= ?v2 ?v0) (= ?v1 1.0)))) :named a13))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (= (scaleR$a ?v0 ?v1) 0.0) (or (= ?v0 0.0) (= ?v1 0.0)))) :named a14))
(assert (! (forall ((?v0 Real) (?v1 A$)) (= (= (scaleR$ ?v0 ?v1) zero$) (or (= ?v0 0.0) (= ?v1 zero$)))) :named a15))
(assert (! (forall ((?v0 Real)) (= (scaleR$a 0.0 ?v0) 0.0)) :named a16))
(assert (! (forall ((?v0 A$)) (= (scaleR$ 0.0 ?v0) zero$)) :named a17))
(assert (! (= (- 1.0 1.0) 0.0) :named a18))
(check-sat)
;;;;(get-proof)
