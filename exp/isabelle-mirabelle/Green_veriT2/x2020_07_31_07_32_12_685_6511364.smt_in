; --index-fresh-sorts --proof-version=2 --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort C$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort C_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort C_a_fun$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort A_b_prod$ 0)
(declare-sort A_measure$ 0)
(declare-sort A_set_set$ 0)
(declare-sort B_measure$ 0)
(declare-sort B_set_set$ 0)
(declare-sort C_measure$ 0)
(declare-sort C_set_set$ 0)
(declare-sort A_a_fun_set$ 0)
(declare-sort B_b_fun_set$ 0)
(declare-sort C_a_fun_set$ 0)
(declare-sort C_b_fun_set$ 0)
(declare-sort C_c_fun_set$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_b_prod_set$ 0)
(declare-sort A_c_prod_set$ 0)
(declare-sort B_a_prod_set$ 0)
(declare-sort A_b_prod_a_fun$ 0)
(declare-sort A_b_prod_b_fun$ 0)
(declare-sort A_b_prod_c_fun$ 0)
(declare-sort C_a_b_prod_fun$ 0)
(declare-sort A_a_prod_measure$ 0)
(declare-sort A_a_prod_set_set$ 0)
(declare-sort A_b_prod_measure$ 0)
(declare-sort A_b_prod_set_set$ 0)
(declare-sort A_c_prod_measure$ 0)
(declare-sort A_c_prod_set_set$ 0)
(declare-sort B_a_prod_measure$ 0)
(declare-sort B_a_prod_set_set$ 0)
(declare-sort B_b_prod_measure$ 0)
(declare-sort B_c_prod_measure$ 0)
(declare-sort C_a_prod_measure$ 0)
(declare-sort C_b_prod_measure$ 0)
(declare-sort C_c_prod_measure$ 0)
(declare-sort A_b_prod_a_fun_set$ 0)
(declare-sort A_b_prod_b_fun_set$ 0)
(declare-sort A_b_prod_c_fun_set$ 0)
(declare-sort C_a_b_prod_fun_set$ 0)
(declare-sort A_a_b_prod_prod_set$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-sort A_a_b_prod_prod_measure$ 0)
(declare-sort A_a_b_prod_prod_set_set$ 0)
(declare-sort A_b_prod_a_b_prod_fun_set$ 0)
(declare-sort A_b_prod_a_b_prod_prod_set$ 0)
(declare-sort C_a_b_prod_a_b_prod_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_prod_measure$ 0)
(declare-sort A_b_prod_a_b_prod_prod_set_set$ 0)
(declare-sort C_a_b_prod_a_b_prod_prod_fun_set$ 0)
(declare-sort A_a_b_prod_a_b_prod_prod_prod_set$ 0)
(declare-sort A_b_prod_a_b_prod_a_b_prod_prod_fun$ 0)
(declare-sort A_a_b_prod_a_b_prod_prod_prod_measure$ 0)
(declare-sort A_a_b_prod_a_b_prod_prod_prod_set_set$ 0)
(declare-sort A_b_prod_a_b_prod_a_b_prod_prod_fun_set$ 0)
(declare-sort A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun_set$ 0)
(declare-fun f$ () A_b_prod_c_fun$)
(declare-fun sgn$ () B_b_fun$)
(declare-fun sets$ (B_a_prod_measure$) B_a_prod_set_set$)
(declare-fun sgn$a () A_a_fun$)
(declare-fun sgn$b () A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$)
(declare-fun sgn$c () A_b_prod_a_b_prod_fun$)
(declare-fun sgn$d () C_c_fun$)
(declare-fun borel$ () C_measure$)
(declare-fun sets$a (A_a_b_prod_a_b_prod_prod_prod_measure$) A_a_b_prod_a_b_prod_prod_prod_set_set$)
(declare-fun sets$b (A_a_b_prod_prod_measure$) A_a_b_prod_prod_set_set$)
(declare-fun sets$c (A_c_prod_measure$) A_c_prod_set_set$)
(declare-fun sets$d (A_a_prod_measure$) A_a_prod_set_set$)
(declare-fun sets$e (A_b_prod_a_b_prod_prod_measure$) A_b_prod_a_b_prod_prod_set_set$)
(declare-fun sets$f (A_measure$) A_set_set$)
(declare-fun sets$g (B_measure$) B_set_set$)
(declare-fun sets$h (A_b_prod_measure$) A_b_prod_set_set$)
(declare-fun sets$i (C_measure$) C_set_set$)
(declare-fun space$ (B_a_prod_measure$) B_a_prod_set$)
(declare-fun borel$a () A_b_prod_measure$)
(declare-fun borel$b () B_a_prod_measure$)
(declare-fun borel$c () A_a_b_prod_a_b_prod_prod_prod_measure$)
(declare-fun borel$d () A_a_b_prod_prod_measure$)
(declare-fun borel$e () A_c_prod_measure$)
(declare-fun borel$f () A_a_prod_measure$)
(declare-fun borel$g () A_b_prod_a_b_prod_prod_measure$)
(declare-fun borel$h () A_measure$)
(declare-fun borel$i () B_measure$)
(declare-fun lborel$ () A_b_prod_measure$)
(declare-fun member$ (A_b_prod_c_fun$ A_b_prod_c_fun_set$) Bool)
(declare-fun space$a (A_a_b_prod_a_b_prod_prod_prod_measure$) A_a_b_prod_a_b_prod_prod_prod_set$)
(declare-fun space$b (A_a_b_prod_prod_measure$) A_a_b_prod_prod_set$)
(declare-fun space$c (A_c_prod_measure$) A_c_prod_set$)
(declare-fun space$d (A_a_prod_measure$) A_a_prod_set$)
(declare-fun space$e (A_b_prod_a_b_prod_prod_measure$) A_b_prod_a_b_prod_prod_set$)
(declare-fun space$f (A_measure$) A_set$)
(declare-fun space$g (B_measure$) B_set$)
(declare-fun space$h (A_b_prod_measure$) A_b_prod_set$)
(declare-fun space$i (C_measure$) C_set$)
(declare-fun lborel$a () C_measure$)
(declare-fun lborel$b () A_measure$)
(declare-fun lborel$c () B_measure$)
(declare-fun lborel$d () A_b_prod_a_b_prod_prod_measure$)
(declare-fun lborel$e () C_c_prod_measure$)
(declare-fun lborel$f () C_a_prod_measure$)
(declare-fun lborel$g () C_b_prod_measure$)
(declare-fun lborel$h () A_c_prod_measure$)
(declare-fun lborel$i () A_a_prod_measure$)
(declare-fun lborel$j () B_c_prod_measure$)
(declare-fun lborel$k () B_a_prod_measure$)
(declare-fun lborel$l () B_b_prod_measure$)
(declare-fun lborel$m () A_a_b_prod_a_b_prod_prod_prod_measure$)
(declare-fun lborel$n () A_a_b_prod_prod_measure$)
(declare-fun member$a (A_b_prod_a_b_prod_fun$ A_b_prod_a_b_prod_fun_set$) Bool)
(declare-fun member$b (C_c_fun$ C_c_fun_set$) Bool)
(declare-fun member$c (C_a_b_prod_fun$ C_a_b_prod_fun_set$) Bool)
(declare-fun member$d (A_b_prod_b_fun$ A_b_prod_b_fun_set$) Bool)
(declare-fun member$e (C_b_fun$ C_b_fun_set$) Bool)
(declare-fun member$f (A_b_prod_a_fun$ A_b_prod_a_fun_set$) Bool)
(declare-fun member$g (C_a_fun$ C_a_fun_set$) Bool)
(declare-fun member$h (A_b_prod_a_b_prod_a_b_prod_prod_fun$ A_b_prod_a_b_prod_a_b_prod_prod_fun_set$) Bool)
(declare-fun member$i (C_a_b_prod_a_b_prod_prod_fun$ C_a_b_prod_a_b_prod_prod_fun_set$) Bool)
(declare-fun member$j (B_a_prod_set$ B_a_prod_set_set$) Bool)
(declare-fun member$k (A_a_b_prod_a_b_prod_prod_prod_set$ A_a_b_prod_a_b_prod_prod_prod_set_set$) Bool)
(declare-fun member$l (A_a_b_prod_prod_set$ A_a_b_prod_prod_set_set$) Bool)
(declare-fun member$m (A_c_prod_set$ A_c_prod_set_set$) Bool)
(declare-fun member$n (A_a_prod_set$ A_a_prod_set_set$) Bool)
(declare-fun member$o (A_b_prod_a_b_prod_prod_set$ A_b_prod_a_b_prod_prod_set_set$) Bool)
(declare-fun member$p (A_set$ A_set_set$) Bool)
(declare-fun member$q (B_set$ B_set_set$) Bool)
(declare-fun member$r (A_b_prod_set$ A_b_prod_set_set$) Bool)
(declare-fun member$s (C_set$ C_set_set$) Bool)
(declare-fun member$t (B_b_fun$ B_b_fun_set$) Bool)
(declare-fun member$u (A_a_fun$ A_a_fun_set$) Bool)
(declare-fun member$v (A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun_set$) Bool)
(declare-fun is_borel$ (A_b_prod_a_b_prod_fun$ A_b_prod_measure$) Bool)
(declare-fun is_borel$a (C_c_fun$ C_measure$) Bool)
(declare-fun is_borel$b (A_b_prod_c_fun$ A_b_prod_measure$) Bool)
(declare-fun integrable$ (A_b_prod_measure$ A_b_prod_a_b_prod_fun$) Bool)
(declare-fun measurable$ (A_b_prod_measure$ C_measure$) A_b_prod_c_fun_set$)
(declare-fun count_space$ (C_set$) C_measure$)
(declare-fun integrable$a (C_measure$ C_c_fun$) Bool)
(declare-fun integrable$b (A_b_prod_measure$ A_b_prod_c_fun$) Bool)
(declare-fun integrable$c (C_measure$ C_a_b_prod_fun$) Bool)
(declare-fun integrable$d (A_b_prod_measure$ A_b_prod_b_fun$) Bool)
(declare-fun integrable$e (C_measure$ C_b_fun$) Bool)
(declare-fun integrable$f (A_b_prod_measure$ A_b_prod_a_fun$) Bool)
(declare-fun integrable$g (C_measure$ C_a_fun$) Bool)
(declare-fun integrable$h (A_b_prod_measure$ A_b_prod_a_b_prod_a_b_prod_prod_fun$) Bool)
(declare-fun integrable$i (C_measure$ C_a_b_prod_a_b_prod_prod_fun$) Bool)
(declare-fun measurable$a (A_b_prod_measure$ A_b_prod_measure$) A_b_prod_a_b_prod_fun_set$)
(declare-fun measurable$b (C_measure$ C_measure$) C_c_fun_set$)
(declare-fun measurable$c (C_measure$ A_b_prod_measure$) C_a_b_prod_fun_set$)
(declare-fun measurable$d (A_b_prod_measure$ B_measure$) A_b_prod_b_fun_set$)
(declare-fun measurable$e (C_measure$ B_measure$) C_b_fun_set$)
(declare-fun measurable$f (A_b_prod_measure$ A_measure$) A_b_prod_a_fun_set$)
(declare-fun measurable$g (C_measure$ A_measure$) C_a_fun_set$)
(declare-fun measurable$h (A_b_prod_measure$ A_b_prod_a_b_prod_prod_measure$) A_b_prod_a_b_prod_a_b_prod_prod_fun_set$)
(declare-fun measurable$i (C_measure$ A_b_prod_a_b_prod_prod_measure$) C_a_b_prod_a_b_prod_prod_fun_set$)
(declare-fun measurable$j (B_measure$ B_measure$) B_b_fun_set$)
(declare-fun measurable$k (A_measure$ A_measure$) A_a_fun_set$)
(declare-fun measurable$l (A_b_prod_a_b_prod_prod_measure$ A_b_prod_a_b_prod_prod_measure$) A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun_set$)
(declare-fun count_space$a (A_b_prod_set$) A_b_prod_measure$)
(declare-fun null_measure$ (C_measure$) C_measure$)
(declare-fun pair_measure$ (A_measure$ B_measure$) A_b_prod_measure$)
(declare-fun null_measure$a (A_b_prod_measure$) A_b_prod_measure$)
(declare-fun pair_measure$a (A_b_prod_measure$ A_b_prod_measure$) A_b_prod_a_b_prod_prod_measure$)
(declare-fun pair_measure$b (C_measure$ C_measure$) C_c_prod_measure$)
(declare-fun pair_measure$c (C_measure$ A_measure$) C_a_prod_measure$)
(declare-fun pair_measure$d (C_measure$ B_measure$) C_b_prod_measure$)
(declare-fun pair_measure$e (A_measure$ C_measure$) A_c_prod_measure$)
(declare-fun pair_measure$f (A_measure$ A_measure$) A_a_prod_measure$)
(declare-fun pair_measure$g (B_measure$ C_measure$) B_c_prod_measure$)
(declare-fun pair_measure$h (B_measure$ A_measure$) B_a_prod_measure$)
(declare-fun pair_measure$i (B_measure$ B_measure$) B_b_prod_measure$)
(declare-fun has_bochner_integral$ (A_b_prod_measure$ A_b_prod_a_b_prod_fun$ A_b_prod$) Bool)
(declare-fun has_bochner_integral$a (C_measure$ C_c_fun$ C$) Bool)
(declare-fun has_bochner_integral$b (A_b_prod_measure$ A_b_prod_c_fun$ C$) Bool)
(assert (! (not (member$ f$ (measurable$ lborel$ borel$))) :named a0))
(assert (! (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_a_b_prod_fun$)) (=> (integrable$ ?v0 ?v1) (member$a ?v1 (measurable$a ?v0 borel$a)))) :named a1))
(assert (! (forall ((?v0 C_measure$) (?v1 C_c_fun$)) (=> (integrable$a ?v0 ?v1) (member$b ?v1 (measurable$b ?v0 borel$)))) :named a2))
(assert (! (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_c_fun$)) (=> (integrable$b ?v0 ?v1) (member$ ?v1 (measurable$ ?v0 borel$)))) :named a3))
(assert (! (integrable$b lborel$ f$) :named a4))
(assert (! (forall ((?v0 A_b_prod_measure$)) (= (measurable$a ?v0 lborel$) (measurable$a ?v0 borel$a))) :named a5))
(assert (! (forall ((?v0 C_measure$)) (= (measurable$b ?v0 lborel$a) (measurable$b ?v0 borel$))) :named a6))
(assert (! (forall ((?v0 A_b_prod_measure$)) (= (measurable$ ?v0 lborel$a) (measurable$ ?v0 borel$))) :named a7))
(assert (! (forall ((?v0 A_b_prod_measure$)) (= (measurable$a lborel$ ?v0) (measurable$a borel$a ?v0))) :named a8))
(assert (! (forall ((?v0 C_measure$)) (= (measurable$b lborel$a ?v0) (measurable$b borel$ ?v0))) :named a9))
(assert (! (forall ((?v0 C_measure$)) (= (measurable$ lborel$ ?v0) (measurable$ borel$a ?v0))) :named a10))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod_measure$)) (! (= (is_borel$ ?v0 ?v1) (member$a ?v0 (measurable$a ?v1 borel$a))) :pattern ((is_borel$ ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C_measure$)) (! (= (is_borel$a ?v0 ?v1) (member$b ?v0 (measurable$b ?v1 borel$))) :pattern ((is_borel$a ?v0 ?v1)))) :named a12))
(assert (! (forall ((?v0 A_b_prod_c_fun$) (?v1 A_b_prod_measure$)) (! (= (is_borel$b ?v0 ?v1) (member$ ?v0 (measurable$ ?v1 borel$))) :pattern ((is_borel$b ?v0 ?v1)))) :named a13))
(assert (! (= (pair_measure$ lborel$b lborel$c) lborel$) :named a14))
(assert (! (= (pair_measure$a lborel$ lborel$) lborel$d) :named a15))
(assert (! (= (pair_measure$b lborel$a lborel$a) lborel$e) :named a16))
(assert (! (= (pair_measure$c lborel$a lborel$b) lborel$f) :named a17))
(assert (! (= (pair_measure$d lborel$a lborel$c) lborel$g) :named a18))
(assert (! (= (pair_measure$e lborel$b lborel$a) lborel$h) :named a19))
(assert (! (= (pair_measure$f lborel$b lborel$b) lborel$i) :named a20))
(assert (! (= (pair_measure$g lborel$c lborel$a) lborel$j) :named a21))
(assert (! (= (pair_measure$h lborel$c lborel$b) lborel$k) :named a22))
(assert (! (= (pair_measure$i lborel$c lborel$c) lborel$l) :named a23))
(assert (! (= (sets$ lborel$k) (sets$ borel$b)) :named a24))
(assert (! (= (sets$a lborel$m) (sets$a borel$c)) :named a25))
(assert (! (= (sets$b lborel$n) (sets$b borel$d)) :named a26))
(assert (! (= (sets$c lborel$h) (sets$c borel$e)) :named a27))
(assert (! (= (sets$d lborel$i) (sets$d borel$f)) :named a28))
(assert (! (= (sets$e lborel$d) (sets$e borel$g)) :named a29))
(assert (! (= (sets$f lborel$b) (sets$f borel$h)) :named a30))
(assert (! (= (sets$g lborel$c) (sets$g borel$i)) :named a31))
(assert (! (= (sets$h lborel$) (sets$h borel$a)) :named a32))
(assert (! (= (sets$i lborel$a) (sets$i borel$)) :named a33))
(assert (! (forall ((?v0 C_measure$) (?v1 C_a_b_prod_fun$)) (= (integrable$c (null_measure$ ?v0) ?v1) (member$c ?v1 (measurable$c ?v0 borel$a)))) :named a34))
(assert (! (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_b_fun$)) (= (integrable$d (null_measure$a ?v0) ?v1) (member$d ?v1 (measurable$d ?v0 borel$i)))) :named a35))
(assert (! (forall ((?v0 C_measure$) (?v1 C_b_fun$)) (= (integrable$e (null_measure$ ?v0) ?v1) (member$e ?v1 (measurable$e ?v0 borel$i)))) :named a36))
(assert (! (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_a_fun$)) (= (integrable$f (null_measure$a ?v0) ?v1) (member$f ?v1 (measurable$f ?v0 borel$h)))) :named a37))
(assert (! (forall ((?v0 C_measure$) (?v1 C_a_fun$)) (= (integrable$g (null_measure$ ?v0) ?v1) (member$g ?v1 (measurable$g ?v0 borel$h)))) :named a38))
(assert (! (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_a_b_prod_a_b_prod_prod_fun$)) (= (integrable$h (null_measure$a ?v0) ?v1) (member$h ?v1 (measurable$h ?v0 borel$g)))) :named a39))
(assert (! (forall ((?v0 C_measure$) (?v1 C_a_b_prod_a_b_prod_prod_fun$)) (= (integrable$i (null_measure$ ?v0) ?v1) (member$i ?v1 (measurable$i ?v0 borel$g)))) :named a40))
(assert (! (forall ((?v0 C_measure$) (?v1 C_c_fun$)) (= (integrable$a (null_measure$ ?v0) ?v1) (member$b ?v1 (measurable$b ?v0 borel$)))) :named a41))
(assert (! (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_a_b_prod_fun$)) (= (integrable$ (null_measure$a ?v0) ?v1) (member$a ?v1 (measurable$a ?v0 borel$a)))) :named a42))
(assert (! (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_c_fun$)) (= (integrable$b (null_measure$a ?v0) ?v1) (member$ ?v1 (measurable$ ?v0 borel$)))) :named a43))
(assert (! (= (space$ lborel$k) (space$ borel$b)) :named a44))
(assert (! (= (space$a lborel$m) (space$a borel$c)) :named a45))
(assert (! (= (space$b lborel$n) (space$b borel$d)) :named a46))
(assert (! (= (space$c lborel$h) (space$c borel$e)) :named a47))
(assert (! (= (space$d lborel$i) (space$d borel$f)) :named a48))
(assert (! (= (space$e lborel$d) (space$e borel$g)) :named a49))
(assert (! (= (space$f lborel$b) (space$f borel$h)) :named a50))
(assert (! (= (space$g lborel$c) (space$g borel$i)) :named a51))
(assert (! (= (space$h lborel$) (space$h borel$a)) :named a52))
(assert (! (= (space$i lborel$a) (space$i borel$)) :named a53))
(assert (! (forall ((?v0 B_a_prod_set$)) (=> (member$j ?v0 (sets$ borel$b)) (member$j ?v0 (sets$ lborel$k)))) :named a54))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_set$)) (=> (member$k ?v0 (sets$a borel$c)) (member$k ?v0 (sets$a lborel$m)))) :named a55))
(assert (! (forall ((?v0 A_a_b_prod_prod_set$)) (=> (member$l ?v0 (sets$b borel$d)) (member$l ?v0 (sets$b lborel$n)))) :named a56))
(assert (! (forall ((?v0 A_c_prod_set$)) (=> (member$m ?v0 (sets$c borel$e)) (member$m ?v0 (sets$c lborel$h)))) :named a57))
(assert (! (forall ((?v0 A_a_prod_set$)) (=> (member$n ?v0 (sets$d borel$f)) (member$n ?v0 (sets$d lborel$i)))) :named a58))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_set$)) (=> (member$o ?v0 (sets$e borel$g)) (member$o ?v0 (sets$e lborel$d)))) :named a59))
(assert (! (forall ((?v0 A_set$)) (=> (member$p ?v0 (sets$f borel$h)) (member$p ?v0 (sets$f lborel$b)))) :named a60))
(assert (! (forall ((?v0 B_set$)) (=> (member$q ?v0 (sets$g borel$i)) (member$q ?v0 (sets$g lborel$c)))) :named a61))
(assert (! (forall ((?v0 A_b_prod_set$)) (=> (member$r ?v0 (sets$h borel$a)) (member$r ?v0 (sets$h lborel$)))) :named a62))
(assert (! (forall ((?v0 C_set$)) (=> (member$s ?v0 (sets$i borel$)) (member$s ?v0 (sets$i lborel$a)))) :named a63))
(assert (! (member$t sgn$ (measurable$j borel$i borel$i)) :named a64))
(assert (! (member$u sgn$a (measurable$k borel$h borel$h)) :named a65))
(assert (! (member$v sgn$b (measurable$l borel$g borel$g)) :named a66))
(assert (! (member$a sgn$c (measurable$a borel$a borel$a)) :named a67))
(assert (! (member$b sgn$d (measurable$b borel$ borel$)) :named a68))
(assert (! (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_a_b_prod_fun$) (?v2 A_b_prod$)) (=> (has_bochner_integral$ ?v0 ?v1 ?v2) (member$a ?v1 (measurable$a ?v0 borel$a)))) :named a69))
(assert (! (forall ((?v0 C_measure$) (?v1 C_c_fun$) (?v2 C$)) (=> (has_bochner_integral$a ?v0 ?v1 ?v2) (member$b ?v1 (measurable$b ?v0 borel$)))) :named a70))
(assert (! (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_c_fun$) (?v2 C$)) (=> (has_bochner_integral$b ?v0 ?v1 ?v2) (member$ ?v1 (measurable$ ?v0 borel$)))) :named a71))
(assert (! (forall ((?v0 C_a_b_prod_fun$) (?v1 C_set$)) (member$c ?v0 (measurable$c (count_space$ ?v1) borel$a))) :named a72))
(assert (! (forall ((?v0 A_b_prod_b_fun$) (?v1 A_b_prod_set$)) (member$d ?v0 (measurable$d (count_space$a ?v1) borel$i))) :named a73))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_set$)) (member$e ?v0 (measurable$e (count_space$ ?v1) borel$i))) :named a74))
(assert (! (forall ((?v0 A_b_prod_a_fun$) (?v1 A_b_prod_set$)) (member$f ?v0 (measurable$f (count_space$a ?v1) borel$h))) :named a75))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_set$)) (member$g ?v0 (measurable$g (count_space$ ?v1) borel$h))) :named a76))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_a_b_prod_prod_fun$) (?v1 A_b_prod_set$)) (member$h ?v0 (measurable$h (count_space$a ?v1) borel$g))) :named a77))
(assert (! (forall ((?v0 C_a_b_prod_a_b_prod_prod_fun$) (?v1 C_set$)) (member$i ?v0 (measurable$i (count_space$ ?v1) borel$g))) :named a78))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C_set$)) (member$b ?v0 (measurable$b (count_space$ ?v1) borel$))) :named a79))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod_set$)) (member$a ?v0 (measurable$a (count_space$a ?v1) borel$a))) :named a80))
(assert (! (forall ((?v0 A_b_prod_c_fun$) (?v1 A_b_prod_set$)) (member$ ?v0 (measurable$ (count_space$a ?v1) borel$))) :named a81))
(check-sat)
;;;;(get-proof)
