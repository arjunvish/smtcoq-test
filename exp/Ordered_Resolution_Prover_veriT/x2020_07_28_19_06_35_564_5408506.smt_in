; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=1
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Enat$ 0)
(declare-sort A_llist$ 0)
(declare-fun j$ () Nat$)
(declare-fun r$ (A$ A$) Bool)
(declare-fun xs$ () A_llist$)
(declare-fun y0$ () A$)
(declare-fun y1$ () A$)
(declare-fun ys$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun ys$a () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist$ Nat$) A$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun llength$ (A_llist$) Enat$)
(assert (! (not (r$ (lnth$ xs$ j$) (lnth$ xs$ (suc$ j$)))) :named a0))
(assert (! (r$ y0$ y1$) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lhd$ (lCons$ ?v0 ?v1)) ?v0) :pattern ((lCons$ ?v0 ?v1)))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (=> (less$ (enat$ ?v0) (llength$ ?v1)) (= (lCons$ (lnth$ ?v1 ?v0) (ldropn$ (suc$ ?v0) ?v1)) (ldropn$ ?v0 ?v1)))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (=> (= (ldropn$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (less$ (enat$ ?v0) (llength$ ?v1)))) :named a4))
(assert (! (= ys$ (lCons$ y0$ (lCons$ y1$ ys$a))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a6))
(assert (! (= ys$ (ldropn$ j$ xs$)) :named a7))
(check-sat)
;;;;(get-proof)
