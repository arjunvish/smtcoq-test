; smt.random_seed=1 smt.refine_inj_axioms=false -T:30 -smt2
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_set$ 0)
(declare-sort A_list$ 0)
(declare-sort A_multiset_list$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-sort A_literal_multiset_multiset$ 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun$ 0)
(declare-fun n$ () A_literal_multiset_set$)
(declare-fun s$ () A_literal_multiset_a_literal_multiset_fun$)
(declare-fun da$ () A_literal_multiset$)
(declare-fun bot$ () A_set$)
(declare-fun set$ (A_literal_multiset_list$) A_literal_multiset_set$)
(declare-fun less$ (A_literal_multiset$ A_literal_multiset$) Bool)
(declare-fun mset$ (A_literal_multiset_list$) A_literal_multiset_multiset$)
(declare-fun zero$ () A_literal_multiset$)
(declare-fun interp$ (A_literal_multiset_a_literal_multiset_fun$ A_literal_multiset_set$) A_set$)
(declare-fun member$ (A_literal_multiset$ A_literal_multiset_set$) Bool)
(declare-fun thesis$ () Bool)
(declare-fun less_eq$ (A_literal_multiset_set$ A_literal_multiset_set$) Bool)
(declare-fun less_eq$a (A_literal_multiset$ A_literal_multiset$) Bool)
(declare-fun true_cls$ (A_set$ A_literal_multiset$) Bool)
(declare-fun production$ (A_literal_multiset_a_literal_multiset_fun$ A_literal_multiset_set$ A_literal_multiset$) A_set$)
(declare-fun ord_resolve$ (A_literal_multiset_a_literal_multiset_fun$ A_literal_multiset_list$ A_literal_multiset$ A_multiset_list$ A_list$ A_literal_multiset$) Bool)
(declare-fun true_cls_mset$ (A_set$ A_literal_multiset_multiset$) Bool)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 A_literal_multiset_list$) (?v1 A_multiset_list$) (?v2 A_list$) (?v3 A_literal_multiset$)) (=> (and (less_eq$ (set$ ?v0) n$) (and (true_cls_mset$ (interp$ s$ n$) (mset$ ?v0)) (and (ord_resolve$ s$ ?v0 da$ ?v1 ?v2 ?v3) (and (not (true_cls$ (interp$ s$ n$) ?v3)) (less$ ?v3 da$))))) thesis$)) :named a1))
(assert (! (not (member$ zero$ n$)) :named a2))
(assert (! (member$ da$ n$) :named a3))
(assert (! (not (true_cls$ (interp$ s$ n$) da$)) :named a4))
(assert (! (forall ((?v0 A_literal_multiset$)) (=> (and (member$ ?v0 n$) (not (true_cls$ (interp$ s$ n$) ?v0))) (less_eq$a da$ ?v0))) :named a5))
(assert (! (=> (and (not (member$ zero$ n$)) (and (member$ da$ n$) (and (not (true_cls$ (interp$ s$ n$) da$)) (and (forall ((?v0 A_literal_multiset$)) (=> (and (member$ ?v0 n$) (not (true_cls$ (interp$ s$ n$) ?v0))) (less_eq$a da$ ?v0))) (forall ((?v0 A_literal_multiset_list$) (?v1 A_multiset_list$) (?v2 A_list$) (?v3 A_literal_multiset$)) (=> (and (less_eq$ (set$ ?v0) n$) (and (true_cls_mset$ (interp$ s$ n$) (mset$ ?v0)) (and (forall ((?v4 A_literal_multiset$)) (=> (member$ ?v4 (set$ ?v0)) (not (= (production$ s$ n$ ?v4) bot$)))) (and (ord_resolve$ s$ ?v0 da$ ?v1 ?v2 ?v3) (and (not (true_cls$ (interp$ s$ n$) ?v3)) (less$ ?v3 da$)))))) thesis$)))))) thesis$) :named a6))
(check-sat)
;;;;(get-proof)
